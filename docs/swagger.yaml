basePath: /api
definitions:
  dto.CategoryDTO:
    properties:
      type:
        type: string
    required:
    - type
    type: object
  dto.InputProduct:
    properties:
      category_id:
        type: integer
      price:
        type: integer
      stock:
        type: integer
      title:
        type: string
    type: object
  dto.LoginDto:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.Product:
    properties:
      category_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      price:
        type: integer
      stock:
        type: integer
      title:
        type: string
    type: object
  dto.ResponseProducts:
    properties:
      category_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      price:
        type: integer
      stock:
        type: integer
      title:
        type: string
    type: object
  dto.TopUpBalanceDto:
    properties:
      balance:
        maximum: 1000000000
        type: integer
    required:
    - balance
    type: object
  dto.UpsertUserDto:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
    required:
    - email
    - full_name
    - password
    type: object
  models.CategoryModel:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      products:
        items:
          $ref: '#/definitions/models.ProductModel'
        type: array
      sold_product_amount:
        type: integer
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  models.ProductModel:
    properties:
      category_id:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      price:
        type: integer
      stock:
        type: integer
      title:
        type: string
      transaction_history:
        items:
          $ref: '#/definitions/models.TransactionHistoryModel'
        type: array
      updated_at:
        type: string
    type: object
  models.TransactionHistoryModel:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      product_id:
        type: integer
      quantity:
        type: integer
      total_price:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.UserModel:
    properties:
      balance:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      transaction_history:
        items:
          $ref: '#/definitions/models.TransactionHistoryModel'
        type: array
      updated_at:
        type: string
    type: object
  utils.HttpError:
    properties:
      message: {}
      stack_trace: {}
    type: object
  utils.HttpSuccess-any:
    properties:
      data: {}
      message: {}
    type: object
  utils.HttpSuccess-array_dto_ResponseProducts:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.ResponseProducts'
        type: array
      message: {}
    type: object
  utils.HttpSuccess-array_models_CategoryModel:
    properties:
      data:
        items:
          $ref: '#/definitions/models.CategoryModel'
        type: array
      message: {}
    type: object
  utils.HttpSuccess-array_models_UserModel:
    properties:
      data:
        items:
          $ref: '#/definitions/models.UserModel'
        type: array
      message: {}
    type: object
  utils.HttpSuccess-dto_Product:
    properties:
      data:
        $ref: '#/definitions/dto.Product'
      message: {}
    type: object
  utils.HttpSuccess-dto_UpsertUserDto:
    properties:
      data:
        $ref: '#/definitions/dto.UpsertUserDto'
      message: {}
    type: object
  utils.HttpSuccess-models_CategoryModel:
    properties:
      data:
        $ref: '#/definitions/models.CategoryModel'
      message: {}
    type: object
  utils.HttpSuccess-models_LoginResponse:
    properties:
      data:
        $ref: '#/definitions/models.LoginResponse'
      message: {}
    type: object
  utils.HttpSuccess-string:
    properties:
      data:
        type: string
      message: {}
    type: object
host: localhost:3030
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /categories:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-array_models_CategoryModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: get all categories based on user
      tags:
      - Categories
    post:
      parameters:
      - description: Create Category DTO
        in: body
        name: Category
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryDTO'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.HttpSuccess-models_CategoryModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: create a category
      tags:
      - Categories
  /categories/{id}:
    delete:
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: Delete a category
      tags:
      - Categories
    patch:
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Category On User
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryDTO'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-models_CategoryModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: Update a category
      tags:
      - Categories
  /product:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-array_dto_ResponseProducts'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: get all product
      tags:
      - Product
  /product/{id}:
    delete:
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: Delete a Product
      tags:
      - Product
    put:
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Category On User
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/dto.Product'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-dto_Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - Product
  /product/create:
    post:
      parameters:
      - description: Create Category DTO
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/dto.InputProduct'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.HttpSuccess-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: create a product
      tags:
      - Product
  /user:
    delete:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: delete current user based on JWT
      tags:
      - User
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-array_models_UserModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: get mutilple users
      tags:
      - User
    put:
      parameters:
      - description: Update User Based On Token
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpsertUserDto'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-dto_UpsertUserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: create a user
      tags:
      - User
  /user/login:
    post:
      parameters:
      - description: Login User DTO
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDto'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-models_LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: login a user
      tags:
      - User
  /user/register:
    post:
      parameters:
      - description: Create User DTO
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpsertUserDto'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.HttpSuccess-dto_UpsertUserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      summary: create a user
      tags:
      - User
  /user/topup:
    patch:
      parameters:
      - description: Top Up
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.TopUpBalanceDto'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpSuccess-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpError'
      security:
      - BearerAuth: []
      summary: top up user balance based on token
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
